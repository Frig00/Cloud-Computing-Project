name: Build Docker images and push to ECR

on:
  push:
    paths:
      - 'src/controller/**'
      - 'src/transcoder-aws/**'
  workflow_dispatch:
 
jobs:        
  build:
    strategy:
      fail-fast: false
      matrix:
        service: [controller, transcoder-aws]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login into AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Build and push Docker images
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ matrix.service }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest $REPOSITORY
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        working-directory: ./src

      - name: Download task definition
        if: matrix.service == 'controller'
        run: |
          aws ecs describe-task-definition --task-definition sunomi-ecs-tdf-controller --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        if: matrix.service == 'controller'
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: controller
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        if: matrix.service == 'controller'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: sunomi-controller
          cluster: sunomi-ecs-cluster-controller