/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * Testing the Fastify swagger API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthLoginPost500Response,
  Get200Response,
  VideoAllVideosGet200ResponseInner,
  VideoVideoIdCommentPostRequest,
  VideoVideoIdCommentsGet200Response,
  VideoVideoIdGet200Response,
  VideoVideoIdLikePost200Response,
  VideoVideoIdLikePostRequest,
} from '../models/index';
import {
    AuthLoginPost500ResponseFromJSON,
    AuthLoginPost500ResponseToJSON,
    Get200ResponseFromJSON,
    Get200ResponseToJSON,
    VideoAllVideosGet200ResponseInnerFromJSON,
    VideoAllVideosGet200ResponseInnerToJSON,
    VideoVideoIdCommentPostRequestFromJSON,
    VideoVideoIdCommentPostRequestToJSON,
    VideoVideoIdCommentsGet200ResponseFromJSON,
    VideoVideoIdCommentsGet200ResponseToJSON,
    VideoVideoIdGet200ResponseFromJSON,
    VideoVideoIdGet200ResponseToJSON,
    VideoVideoIdLikePost200ResponseFromJSON,
    VideoVideoIdLikePost200ResponseToJSON,
    VideoVideoIdLikePostRequestFromJSON,
    VideoVideoIdLikePostRequestToJSON,
} from '../models/index';

export interface VideoAllVideosGetRequest {
    skip: number;
    take: number;
}

export interface VideoSearchPostRequest {
    q: string;
}

export interface VideoSubscriptionsGetRequest {
    skip: number;
    take: number;
}

export interface VideoUserUserIdVideosGetRequest {
    userId: string;
}

export interface VideoVideoIdCommentPostOperationRequest {
    videoId: string;
    videoVideoIdCommentPostRequest: VideoVideoIdCommentPostRequest;
}

export interface VideoVideoIdCommentsGetRequest {
    skip: number;
    take: number;
    videoId: string;
}

export interface VideoVideoIdDeleteRequest {
    videoId: string;
}

export interface VideoVideoIdGetRequest {
    videoId: string;
}

export interface VideoVideoIdLikePostOperationRequest {
    videoId: string;
    videoVideoIdLikePostRequest: VideoVideoIdLikePostRequest;
}

/**
 * 
 */
export class VideoApi extends runtime.BaseAPI {

    /**
     * Get all public videos with pagination
     * Retrieves a paginated list of all public videos
     */
    async videoAllVideosGetRaw(requestParameters: VideoAllVideosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VideoAllVideosGet200ResponseInner>>> {
        if (requestParameters['skip'] == null) {
            throw new runtime.RequiredError(
                'skip',
                'Required parameter "skip" was null or undefined when calling videoAllVideosGet().'
            );
        }

        if (requestParameters['take'] == null) {
            throw new runtime.RequiredError(
                'take',
                'Required parameter "take" was null or undefined when calling videoAllVideosGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/video/all-videos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VideoAllVideosGet200ResponseInnerFromJSON));
    }

    /**
     * Get all public videos with pagination
     * Retrieves a paginated list of all public videos
     */
    async videoAllVideosGet(requestParameters: VideoAllVideosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VideoAllVideosGet200ResponseInner>> {
        const response = await this.videoAllVideosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for videos by title
     * Searches for videos matching the provided search terms
     */
    async videoSearchPostRaw(requestParameters: VideoSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VideoAllVideosGet200ResponseInner>>> {
        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling videoSearchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/video/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VideoAllVideosGet200ResponseInnerFromJSON));
    }

    /**
     * Search for videos by title
     * Searches for videos matching the provided search terms
     */
    async videoSearchPost(requestParameters: VideoSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VideoAllVideosGet200ResponseInner>> {
        const response = await this.videoSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get subscription videos for a user
     * Retrieves a paginated list of videos from channels the user is subscribed to
     */
    async videoSubscriptionsGetRaw(requestParameters: VideoSubscriptionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VideoAllVideosGet200ResponseInner>>> {
        if (requestParameters['skip'] == null) {
            throw new runtime.RequiredError(
                'skip',
                'Required parameter "skip" was null or undefined when calling videoSubscriptionsGet().'
            );
        }

        if (requestParameters['take'] == null) {
            throw new runtime.RequiredError(
                'take',
                'Required parameter "take" was null or undefined when calling videoSubscriptionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/video/subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VideoAllVideosGet200ResponseInnerFromJSON));
    }

    /**
     * Get subscription videos for a user
     * Retrieves a paginated list of videos from channels the user is subscribed to
     */
    async videoSubscriptionsGet(requestParameters: VideoSubscriptionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VideoAllVideosGet200ResponseInner>> {
        const response = await this.videoSubscriptionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all videos from a specific user
     * Retrieves a list of videos uploaded by a particular user
     */
    async videoUserUserIdVideosGetRaw(requestParameters: VideoUserUserIdVideosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VideoAllVideosGet200ResponseInner>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling videoUserUserIdVideosGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/video/user/{userId}/videos`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VideoAllVideosGet200ResponseInnerFromJSON));
    }

    /**
     * Get all videos from a specific user
     * Retrieves a list of videos uploaded by a particular user
     */
    async videoUserUserIdVideosGet(requestParameters: VideoUserUserIdVideosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VideoAllVideosGet200ResponseInner>> {
        const response = await this.videoUserUserIdVideosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a comment to a video
     * Posts a new comment on a specific video
     */
    async videoVideoIdCommentPostRaw(requestParameters: VideoVideoIdCommentPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling videoVideoIdCommentPost().'
            );
        }

        if (requestParameters['videoVideoIdCommentPostRequest'] == null) {
            throw new runtime.RequiredError(
                'videoVideoIdCommentPostRequest',
                'Required parameter "videoVideoIdCommentPostRequest" was null or undefined when calling videoVideoIdCommentPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/video/{videoId}/comment`.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VideoVideoIdCommentPostRequestToJSON(requestParameters['videoVideoIdCommentPostRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Add a comment to a video
     * Posts a new comment on a specific video
     */
    async videoVideoIdCommentPost(requestParameters: VideoVideoIdCommentPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.videoVideoIdCommentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get paginated comments for a video
     * Retrieves a paginated list of comments for a specific video
     */
    async videoVideoIdCommentsGetRaw(requestParameters: VideoVideoIdCommentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoVideoIdCommentsGet200Response>> {
        if (requestParameters['skip'] == null) {
            throw new runtime.RequiredError(
                'skip',
                'Required parameter "skip" was null or undefined when calling videoVideoIdCommentsGet().'
            );
        }

        if (requestParameters['take'] == null) {
            throw new runtime.RequiredError(
                'take',
                'Required parameter "take" was null or undefined when calling videoVideoIdCommentsGet().'
            );
        }

        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling videoVideoIdCommentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/video/{videoId}/comments`.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoVideoIdCommentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get paginated comments for a video
     * Retrieves a paginated list of comments for a specific video
     */
    async videoVideoIdCommentsGet(requestParameters: VideoVideoIdCommentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoVideoIdCommentsGet200Response> {
        const response = await this.videoVideoIdCommentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a video and all related data
     * Deletes a video and its associated comments, likes, and views
     */
    async videoVideoIdDeleteRaw(requestParameters: VideoVideoIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Get200Response>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling videoVideoIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/video/{videoId}`.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Get200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a video and all related data
     * Deletes a video and its associated comments, likes, and views
     */
    async videoVideoIdDelete(requestParameters: VideoVideoIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Get200Response> {
        const response = await this.videoVideoIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific video
     * Retrieves comprehensive details of a video including likes, view count and others infos
     */
    async videoVideoIdGetRaw(requestParameters: VideoVideoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoVideoIdGet200Response>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling videoVideoIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/video/{videoId}`.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoVideoIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific video
     * Retrieves comprehensive details of a video including likes, view count and others infos
     */
    async videoVideoIdGet(requestParameters: VideoVideoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoVideoIdGet200Response> {
        const response = await this.videoVideoIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Like or unlike a video
     * Toggles the like status of a video for the current user
     */
    async videoVideoIdLikePostRaw(requestParameters: VideoVideoIdLikePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoVideoIdLikePost200Response>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling videoVideoIdLikePost().'
            );
        }

        if (requestParameters['videoVideoIdLikePostRequest'] == null) {
            throw new runtime.RequiredError(
                'videoVideoIdLikePostRequest',
                'Required parameter "videoVideoIdLikePostRequest" was null or undefined when calling videoVideoIdLikePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/video/{videoId}/like`.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VideoVideoIdLikePostRequestToJSON(requestParameters['videoVideoIdLikePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoVideoIdLikePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Like or unlike a video
     * Toggles the like status of a video for the current user
     */
    async videoVideoIdLikePost(requestParameters: VideoVideoIdLikePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoVideoIdLikePost200Response> {
        const response = await this.videoVideoIdLikePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
