/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * Testing the Fastify swagger API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthLoginPost500Response,
  VideoAllVideosGet200ResponseInner,
  VideoVideoIdCommentPostRequest,
  VideoVideoIdGet200Response,
} from '../models/index';
import {
    AuthLoginPost500ResponseFromJSON,
    AuthLoginPost500ResponseToJSON,
    VideoAllVideosGet200ResponseInnerFromJSON,
    VideoAllVideosGet200ResponseInnerToJSON,
    VideoVideoIdCommentPostRequestFromJSON,
    VideoVideoIdCommentPostRequestToJSON,
    VideoVideoIdGet200ResponseFromJSON,
    VideoVideoIdGet200ResponseToJSON,
} from '../models/index';

export interface VideoSearchPostRequest {
    q: string;
}

export interface VideoVideoIdCommentPostOperationRequest {
    videoId: string;
    videoVideoIdCommentPostRequest: VideoVideoIdCommentPostRequest;
}

export interface VideoVideoIdGetRequest {
    videoId: string;
}

export interface VideoVideoIdLikeGetRequest {
    isLiking: boolean;
    videoId: string;
}

/**
 * 
 */
export class VideoApi extends runtime.BaseAPI {

    /**
     */
    async videoAllVideosGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VideoAllVideosGet200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/video/all-videos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VideoAllVideosGet200ResponseInnerFromJSON));
    }

    /**
     */
    async videoAllVideosGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VideoAllVideosGet200ResponseInner>> {
        const response = await this.videoAllVideosGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async videoSearchPostRaw(requestParameters: VideoSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VideoAllVideosGet200ResponseInner>>> {
        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling videoSearchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/video/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VideoAllVideosGet200ResponseInnerFromJSON));
    }

    /**
     */
    async videoSearchPost(requestParameters: VideoSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VideoAllVideosGet200ResponseInner>> {
        const response = await this.videoSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async videoVideoIdCommentPostRaw(requestParameters: VideoVideoIdCommentPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling videoVideoIdCommentPost().'
            );
        }

        if (requestParameters['videoVideoIdCommentPostRequest'] == null) {
            throw new runtime.RequiredError(
                'videoVideoIdCommentPostRequest',
                'Required parameter "videoVideoIdCommentPostRequest" was null or undefined when calling videoVideoIdCommentPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/video/{videoId}/comment`.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VideoVideoIdCommentPostRequestToJSON(requestParameters['videoVideoIdCommentPostRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async videoVideoIdCommentPost(requestParameters: VideoVideoIdCommentPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.videoVideoIdCommentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async videoVideoIdGetRaw(requestParameters: VideoVideoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoVideoIdGet200Response>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling videoVideoIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/video/{videoId}`.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoVideoIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async videoVideoIdGet(requestParameters: VideoVideoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoVideoIdGet200Response> {
        const response = await this.videoVideoIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async videoVideoIdLikeGetRaw(requestParameters: VideoVideoIdLikeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['isLiking'] == null) {
            throw new runtime.RequiredError(
                'isLiking',
                'Required parameter "isLiking" was null or undefined when calling videoVideoIdLikeGet().'
            );
        }

        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling videoVideoIdLikeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isLiking'] != null) {
            queryParameters['isLiking'] = requestParameters['isLiking'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/video/{videoId}/like`.replace(`{${"videoId"}}`, encodeURIComponent(String(requestParameters['videoId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async videoVideoIdLikeGet(requestParameters: VideoVideoIdLikeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.videoVideoIdLikeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
