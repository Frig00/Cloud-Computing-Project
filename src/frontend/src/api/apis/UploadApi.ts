/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * Testing the Fastify swagger API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthLoginPost500Response,
  UploadTranscodeVideoPost200Response,
  UploadTranscodeVideoPostRequest,
  UploadUploadUrlPost200Response,
  UploadUploadUrlPostRequest,
} from '../models/index';
import {
    AuthLoginPost500ResponseFromJSON,
    AuthLoginPost500ResponseToJSON,
    UploadTranscodeVideoPost200ResponseFromJSON,
    UploadTranscodeVideoPost200ResponseToJSON,
    UploadTranscodeVideoPostRequestFromJSON,
    UploadTranscodeVideoPostRequestToJSON,
    UploadUploadUrlPost200ResponseFromJSON,
    UploadUploadUrlPost200ResponseToJSON,
    UploadUploadUrlPostRequestFromJSON,
    UploadUploadUrlPostRequestToJSON,
} from '../models/index';

export interface UploadSseVideoIDGetRequest {
    videoID: string;
}

export interface UploadTranscodeVideoPostOperationRequest {
    uploadTranscodeVideoPostRequest: UploadTranscodeVideoPostRequest;
}

export interface UploadUploadUrlPostOperationRequest {
    uploadUploadUrlPostRequest: UploadUploadUrlPostRequest;
}

export interface UploadWsVideoIDGetRequest {
    videoID: string;
}

/**
 * 
 */
export class UploadApi extends runtime.BaseAPI {

    /**
     * Get transcoding percentage
     * Get transcoding percentage
     */
    async uploadSseVideoIDGetRaw(requestParameters: UploadSseVideoIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['videoID'] == null) {
            throw new runtime.RequiredError(
                'videoID',
                'Required parameter "videoID" was null or undefined when calling uploadSseVideoIDGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/sse/{videoID}`.replace(`{${"videoID"}}`, encodeURIComponent(String(requestParameters['videoID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get transcoding percentage
     * Get transcoding percentage
     */
    async uploadSseVideoIDGet(requestParameters: UploadSseVideoIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadSseVideoIDGetRaw(requestParameters, initOverrides);
    }

    /**
     * Transcode a video
     * Transcode video
     */
    async uploadTranscodeVideoPostRaw(requestParameters: UploadTranscodeVideoPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadTranscodeVideoPost200Response>> {
        if (requestParameters['uploadTranscodeVideoPostRequest'] == null) {
            throw new runtime.RequiredError(
                'uploadTranscodeVideoPostRequest',
                'Required parameter "uploadTranscodeVideoPostRequest" was null or undefined when calling uploadTranscodeVideoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/transcode-video`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadTranscodeVideoPostRequestToJSON(requestParameters['uploadTranscodeVideoPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadTranscodeVideoPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Transcode a video
     * Transcode video
     */
    async uploadTranscodeVideoPost(requestParameters: UploadTranscodeVideoPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadTranscodeVideoPost200Response> {
        const response = await this.uploadTranscodeVideoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a pre-signed URL for video uploads
     * Get pre-signed URL
     */
    async uploadUploadUrlPostRaw(requestParameters: UploadUploadUrlPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadUploadUrlPost200Response>> {
        if (requestParameters['uploadUploadUrlPostRequest'] == null) {
            throw new runtime.RequiredError(
                'uploadUploadUrlPostRequest',
                'Required parameter "uploadUploadUrlPostRequest" was null or undefined when calling uploadUploadUrlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/upload-url`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadUploadUrlPostRequestToJSON(requestParameters['uploadUploadUrlPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadUploadUrlPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a pre-signed URL for video uploads
     * Get pre-signed URL
     */
    async uploadUploadUrlPost(requestParameters: UploadUploadUrlPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadUploadUrlPost200Response> {
        const response = await this.uploadUploadUrlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get transcoding percentage
     * Get transcoding percentage
     */
    async uploadWsVideoIDGetRaw(requestParameters: UploadWsVideoIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['videoID'] == null) {
            throw new runtime.RequiredError(
                'videoID',
                'Required parameter "videoID" was null or undefined when calling uploadWsVideoIDGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/ws/{videoID}`.replace(`{${"videoID"}}`, encodeURIComponent(String(requestParameters['videoID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get transcoding percentage
     * Get transcoding percentage
     */
    async uploadWsVideoIDGet(requestParameters: UploadWsVideoIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadWsVideoIDGetRaw(requestParameters, initOverrides);
    }

}
