/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * Testing the Fastify swagger API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  VideoTranscodeVideoPostRequest,
  VideoUploadUrlGet200Response,
} from '../models/index';
import {
    VideoTranscodeVideoPostRequestFromJSON,
    VideoTranscodeVideoPostRequestToJSON,
    VideoUploadUrlGet200ResponseFromJSON,
    VideoUploadUrlGet200ResponseToJSON,
} from '../models/index';

export interface VideoTranscodeVideoPostOperationRequest {
    videoTranscodeVideoPostRequest: VideoTranscodeVideoPostRequest;
}

/**
 * 
 */
export class VideoApi extends runtime.BaseAPI {

    /**
     * Transcode a video
     * Transcode video
     */
    async videoTranscodeVideoPostRaw(requestParameters: VideoTranscodeVideoPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['videoTranscodeVideoPostRequest'] == null) {
            throw new runtime.RequiredError(
                'videoTranscodeVideoPostRequest',
                'Required parameter "videoTranscodeVideoPostRequest" was null or undefined when calling videoTranscodeVideoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/video/transcode-video`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VideoTranscodeVideoPostRequestToJSON(requestParameters['videoTranscodeVideoPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Transcode a video
     * Transcode video
     */
    async videoTranscodeVideoPost(requestParameters: VideoTranscodeVideoPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.videoTranscodeVideoPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get a pre-signed URL for video uploads
     * Get pre-signed URL
     */
    async videoUploadUrlGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoUploadUrlGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/video/upload-url`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoUploadUrlGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a pre-signed URL for video uploads
     * Get pre-signed URL
     */
    async videoUploadUrlGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoUploadUrlGet200Response> {
        const response = await this.videoUploadUrlGetRaw(initOverrides);
        return await response.value();
    }

}
